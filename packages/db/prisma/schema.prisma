// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Fissa {
  pin String @id @unique @db.VarChar(4)

  currentlyPlaying    Track?  @relation(fields: [currentlyPlayingId, currentlyPlayingPin], references: [trackId, pin], name: "currently_playing")
  currentlyPlayingId  String? @map("currently_playing_id")
  currentlyPlayingPin String? @map("currently_playing_pin")

  expectedEndTime DateTime @default(now()) @map("expected_end_time")

  by     User   @relation(fields: [userId], references: [id])
  userId String @unique @map("user_id")

  users UserInFissa[] @relation("PartOf")

  createdAt    DateTime @default(now()) @map("created_at")
  lastUpdateAt DateTime @default(now()) @updatedAt @map("last_update_at")

  tracks Track[]
  votes  Vote[]

  @@map("fissas")
}

model Track {
  trackId    String @map("track_id") @db.VarChar(22)
  durationMs Int    @map("duration_ms")

  createdAt     DateTime @default(now()) @map("created_at")
  lastUpdateAt  DateTime @default(now()) @updatedAt @map("last_update_at")
  hasBeenPlayed Boolean  @default(false) @map("has_been_played")

  fissa Fissa  @relation(fields: [pin], references: [pin], onDelete: Cascade)
  pin   String @db.VarChar(4)

  by     User?   @relation(fields: [userId], references: [id])
  userId String? @map("user_id")

  currentlyPlaying Fissa[] @relation("currently_playing")

  votes      Vote[]
  score      Int    @default(0) @db.SmallInt // Value used for ordering tracks in a fissa
  totalScore Int    @default(0) @map("total_score") @db.SmallInt // Value used for determining the most popular tracks

  @@unique([pin, trackId])
  @@map("tracks")
}

model Vote {
  vote Int @db.SmallInt

  by     User   @relation(fields: [userId], references: [id])
  userId String @map("user_id")

  track   Track  @relation(fields: [trackId, pin], references: [trackId, pin], onDelete: Cascade)
  trackId String @map("track_id") @db.VarChar(22)

  fissa Fissa  @relation(fields: [pin], references: [pin], onDelete: Cascade)
  pin   String @db.VarChar(4)

  @@id([trackId, userId, pin])
  @@map("votes")
}

model UserInFissa {
  createdAt DateTime @default(now()) @map("created_at")

  fissa Fissa  @relation(fields: [pin], references: [pin], name: "PartOf", onDelete: Cascade)
  pin   String @db.VarChar(4)

  user   User   @relation(fields: [userId], references: [id], name: "IsIn", onDelete: Cascade)
  userId String @map("user_id")

  points Int @default(50)

  @@id([pin, userId])
  @@map("users_in_fissas")
}

enum BADGE {
  TRACKS_ADDED
  UP_VOTES_RECEIVED
  DOWN_VOTES_RECEIVED
  FISSAS_CREATED
  FISSAS_JOINED
  UP_VOTES_CAST
  DOWN_VOTES_CAST
  POINTS_EARNED
}

model Badges {
  user        User     @relation(fields: [userId], references: [id], name: "HasEarned", onDelete: Cascade)
  userId      String   @map("user_id")
  lastUpdated DateTime @updatedAt

  name  BADGE
  score Int   @default(0) @db.SmallInt

  @@unique([userId, name])
  @@map("badges")
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver,
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int? // In seconds
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @default(uuid())
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  votes  Vote[]
  hostOf Fissa?

  isIn   UserInFissa[] @relation("IsIn")
  tracks Track[]
  badges Badges[]      @relation("HasEarned")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
