// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Room {
    pin     String @id
    currentIndex Int @map("current_index")
    lastPlayedIndex Int @map("last_played_index")
    expectedEndTime DateTime @map("expected_end_time")

    tracks Track[]

    @@map("rooms")
}

model Track {
    index  Int
    trackId String @map("track_id")
    durationMs Int @map("duration_ms")

    room Room @relation(fields: [roomId], references: [pin])
    roomId String @map("room_id")
    
    votes Vote[]

    @@id([roomId, trackId])
    @@map("tracks")
}

enum VOTE {
    UP
    DOWN
}

model Vote {
    vote VOTE

    by User @relation(fields: [userId], references: [id])
    userId String @map("user_id")

    track Track @relation(fields: [trackId, roomId], references: [trackId, roomId])
    roomId String @map("room_id")
    trackId String @map("track_id")

    @@id([trackId, userId, roomId])
    @@map("votes")
}


// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    votes         Vote[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}
