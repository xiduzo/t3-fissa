// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Fissa {
    pin     String @id @unique @db.VarChar(4)

    currentlyPlaying Track? @relation(fields: [currentlyPlayingId, currentlyPlayingPin], references: [trackId, pin], name: "currently_playing")
    currentlyPlayingId String? @map("currently_playing_id")
    currentlyPlayingPin String? @map("currently_playing_pin")

    expectedEndTime DateTime @map("expected_end_time") @default(now())

    by User @relation(fields: [userId], references: [id])
    userId String @map("user_id")

    lastUpdateAt DateTime @map("last_update_at") @updatedAt @default(now())

    tracks Track[]

    @@map("fissas")
}

model Track {
    trackId String @map("track_id") @db.VarChar(22)
    durationMs Int @map("duration_ms")

    createdAt DateTime @map("created_at") @default(now())
    hasBeenPlayed Boolean @map("has_been_played") @default(false)

    fissa Fissa @relation(fields: [pin], references: [pin], onDelete: Cascade)
    pin String @db.VarChar(4)

    by User? @relation(fields: [userId], references: [id])
    userId String? @map("user_id")

    currentlyPlaying Fissa[] @relation("currently_playing")
    
    votes Vote[]
    score Int @db.SmallInt @default(0)

    @@unique([pin, trackId])
    @@map("tracks")
}

model Vote {
    vote Int @db.SmallInt

    by User @relation(fields: [userId], references: [id])
    userId String @map("user_id")

    track Track @relation(fields: [trackId, pin], references: [trackId, pin], onDelete: Cascade)
    trackId String @map("track_id") @db.VarChar(22)
    
    pin String @db.VarChar(4)

    @@id([trackId, userId, pin])
    @@map("votes")
}


// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int? // In seconds
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @default(uuid())
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    votes         Vote[]
    fissas        Fissa[]
    tracks        Track[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}
